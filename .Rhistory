survfit_n() |>
sf_to_df( time = time ))
cl <- cl + 1/iter*(survfit( Surv( time, status ) ~ 1, data = middle_late ) |>
survfit_n() |>
sf_to_df( time = time ))
le <- le + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_early ) |>
survfit_n() |>
sf_to_df( time = time ))
lc <- lc + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_middle ) |>
survfit_n() |>
sf_to_df( time = time ))
ll <- ll + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_late ) |>
survfit_n() |>
sf_to_df( time = time ))
}
# Early-early
plot1 <- plot_effective_n( ee, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y_sec = F, ylim = c(0, n) )
# Early-middle
plot2 <- plot_effective_n( ec, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) )
# Early-late
plot3 <- plot_effective_n( el, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ylim = c(0, n) )
# Middle-early
plot4 <- plot_effective_n( ce, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y_sec = F, ylim = c(0, 1000) ) #+
#annotate("text", x = 0, y = 480, label = "Patients", angle = 90)
# Middle-middle
plot5 <- plot_effective_n( cc, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) )
# Middle-late
plot6 <- plot_effective_n( cl, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ylim = c(0, n) ) #+
#annotate("text", x = 5, y = 500, label = "Incidence", angle = 270)
# Late-early
plot7 <- plot_effective_n( le, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y_sec = F, ylim = c(0, n) )
# Late-middle
plot8 <- plot_effective_n( lc, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) ) #+
#annotate("text", x = 2.5, y = 20, label = "Time")
# Late-late
plot9 <- plot_effective_n( ll, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y = F, ylim = c(0, n) )
# Combine plots into list
plots <- list( plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9 )
# Column and row labels
col_labels <- c("Early censoring", "Constant censoring", "Late censoring")
row_labels <- c("Early events", "Constant events", "Late events")
# Create text grobs for column and row labels
col_text <- lapply(col_labels, textGrob, gp = gpar(fontsize = 14))
row_text <- lapply(row_labels, textGrob, gp = gpar(fontsize = 14), rot = 90)
# Create a sample plot to extract the legend
legend_plot <- ggplot(data.frame(x = 1, y = 1,
color = c("Effective", "Modified", "Uncensored", "At risk", "Incidence"),
linetype = c("Effective", "Modified", "Uncensored", "At risk", "Incidence")),
aes(x = x, y = y, color = color, linetype = linetype)) +
geom_line(linewidth = 1.3) +
scale_color_manual(values = c("Effective"= "#37293F", "Modified" = "#9f84af", "Uncensored" = "#c6aa2c", "At risk" = "#C2666B"), name = "Legend") +
scale_linetype_manual(values = c("Effective"= "solid", "Modified" = "solid", "Uncensored" = "dotdash", "At risk" = "dashed"), name = "Legend") +
theme(legend.position = "right") + theme_minimal()
# "Bounds",
# "Bounds" = "#c6b5cf",
# "Bounds" = "dashed",
# Extract the legend
legend <- cowplot::get_legend(legend_plot)
# Create top row with column labels
top_row <- arrangeGrob(
grobs = c(list(textGrob("")), col_text),
ncol = 4,
widths = c(0.1, 732/675, 1, 732/675)
)
# Create each row with plots and row label
rows <- lapply(1:3, function(i) {
arrangeGrob(
grobs = c(list(row_text[[i]]), plots[((i-1)*3+1):(i*3)]),
ncol = 4,
widths = c(0.1, 732/675, 1, 732/675)
)
})
# Combine the top row and all plot rows into the final grid
final_grid <- arrangeGrob(
grobs = c(list(top_row), rows),
ncol = 1,
heights = c(0.1, 1, 1, 827/800)
)
# Add legend to the grid
combined_grid <- arrangeGrob(
final_grid,
legend,
ncol = 2,
widths= c(8, 1)
)
grid.arrange(combined_grid)
#ggsave(file = "images/sim2.svg", plot=combined_grid, width = 12, height = 12, dpi = 700)
rm( shape, scale, e_early, e_middle, e_late, c_early, c_middle, c_late,
early_early, early_middle, early_late, middle_early, middle_middle,
middle_late, late_early, late_middle, late_late, plot1, plot2, plot3, plot4,
plot5, plot6, plot7, plot8, plot9, plots, col_labels, row_labels, col_text,
row_text, legend_plot, legend, top_row, rows, final_grid, combined_grid)
#| eval: FALSE
#| include: FALSE
#| label: fig-simulation
#| fig-cap: Results of the simulations based on the hazards proposed in @fig-cumhaz. The simulations are based on 1000 patients per simulation and are the average of 50 repetitions to smoothen the results and avoid extreme outliers. Early, constant and late censoring results can be seen in the left, middle and right columns. Event hazards are different between the top, middle and bottom rows. We can observe that the shape of effective sample size over time depends mostly on the censoring hazard.
#| fig-width: 14
#| fig-asp: 1
# Seed for consistency
set.seed(111923)
scale = c(2.5, 3.5) # scale[1] for events, scale[2] for censoring
shape = c(1/4, 1, 4) # shape[1] for early, [2] for middle and [3] for late
iter = 10 # number of iterations
n = 1000 # number of patients
maxtime = 5 # maxtime
time = seq(0, maxtime, 0.002) # timegrid for plot
ee <- ec <- el <- ce <- cc <- cl <- le <- lc <- ll <- 0
# Multiple simulations - average 1 at a time
for ( i in 1:iter ){
# Generate the six datasets of 1000 patients
e_early <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[1]^(-shape[1]),
x=data.frame(id = 1:n),
maxt=maxtime)
e_middle <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[1]^(-shape[2]),
x=data.frame(id = 1:n),
maxt=maxtime)
e_late <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[1]^(-shape[3]),
x=data.frame(id = 1:n),
maxt=maxtime)
c_early <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[2]^(-shape[1]),
x=data.frame(id = 1:n),
maxt=maxtime)
c_middle <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[2]^(-shape[2]),
x=data.frame(id = 1:n),
maxt=maxtime)
c_late <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[2]^(-shape[3]),
x=data.frame(id = 1:n),
maxt=maxtime)
# Build the 9 dataframes for the figures
early_early <- data.frame(
time = pmin(e_early$eventtime, c_early$eventtime),
status = ifelse(e_early$eventtime == maxtime & c_early$eventtime == maxtime, 0,
ifelse(e_early$eventtime <= c_early$eventtime, 1, 0))
)
early_middle <- data.frame(
time = pmin(e_early$eventtime, c_middle$eventtime),
status = ifelse(e_early$eventtime == maxtime & c_middle$eventtime == maxtime, 0,
ifelse(e_early$eventtime <= c_middle$eventtime, 1, 0))
)
early_late <- data.frame(
time = pmin(e_early$eventtime, c_late$eventtime),
status = ifelse(e_early$eventtime == maxtime & c_late$eventtime == maxtime, 0,
ifelse(e_early$eventtime <= c_late$eventtime, 1, 0))
)
middle_early <- data.frame(
time = pmin(e_middle$eventtime, c_early$eventtime),
status = ifelse(e_middle$eventtime == maxtime & c_early$eventtime == maxtime, 0,
ifelse(e_middle$eventtime <= c_early$eventtime, 1, 0))
)
middle_middle <- data.frame(
time = pmin(e_middle$eventtime, c_middle$eventtime),
status = ifelse(e_middle$eventtime == maxtime & c_middle$eventtime == maxtime, 0,
ifelse(e_middle$eventtime <= c_middle$eventtime, 1, 0))
)
middle_late <- data.frame(
time = pmin(e_middle$eventtime, c_late$eventtime),
status = ifelse(e_middle$eventtime == maxtime & c_late$eventtime == maxtime, 0,
ifelse(e_middle$eventtime <= c_late$eventtime, 1, 0))
)
late_early <- data.frame(
time = pmin(e_late$eventtime, c_early$eventtime),
status = ifelse(e_late$eventtime == maxtime & c_early$eventtime == maxtime, 0,
ifelse(e_late$eventtime <= c_early$eventtime, 1, 0))
)
late_middle <- data.frame(
time = pmin(e_late$eventtime, c_middle$eventtime),
status = ifelse(e_late$eventtime == maxtime & c_middle$eventtime == maxtime, 0,
ifelse(e_late$eventtime <= c_middle$eventtime, 1, 0))
)
late_late <- data.frame(
time = pmin(e_late$eventtime, c_late$eventtime),
status = ifelse(e_late$eventtime == maxtime & c_late$eventtime == maxtime, 0,
ifelse(e_late$eventtime <= c_late$eventtime, 1, 0))
)
ee <- ee + 1/iter*(survfit( Surv( time, status ) ~ 1, data = early_early ) |>
survfit_n() |>
sf_to_df( time = time ))
ec <- ec + 1/iter*(survfit( Surv( time, status ) ~ 1, data = early_middle ) |>
survfit_n() |>
sf_to_df( time = time ))
el <- el + 1/iter*(survfit( Surv( time, status ) ~ 1, data = early_late ) |>
survfit_n() |>
sf_to_df( time = time ))
ce <- ce + 1/iter*(survfit( Surv( time, status ) ~ 1, data = middle_early ) |>
survfit_n() |>
sf_to_df( time = time ))
cc <- cc + 1/iter*(survfit( Surv( time, status ) ~ 1, data = middle_middle ) |>
survfit_n() |>
sf_to_df( time = time ))
cl <- cl + 1/iter*(survfit( Surv( time, status ) ~ 1, data = middle_late ) |>
survfit_n() |>
sf_to_df( time = time ))
le <- le + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_early ) |>
survfit_n() |>
sf_to_df( time = time ))
lc <- lc + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_middle ) |>
survfit_n() |>
sf_to_df( time = time ))
ll <- ll + 1/iter*(survfit( Surv( time, status ) ~ 1, data = late_late ) |>
survfit_n() |>
sf_to_df( time = time ))
}
# Early-early
plot1 <- plot_effective_n( ee, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y_sec = F, ylim = c(0, n) )
# Early-middle
plot2 <- plot_effective_n( ec, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) )
# Early-late
plot3 <- plot_effective_n( el, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ylim = c(0, n) )
# Middle-early
plot4 <- plot_effective_n( ce, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y_sec = F, ylim = c(0, 1000) ) #+
#annotate("text", x = 0, y = 480, label = "Patients", angle = 90)
# Middle-middle
plot5 <- plot_effective_n( cc, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) )
# Middle-late
plot6 <- plot_effective_n( cl, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_x = F, ticks_y = F, ylim = c(0, n) ) #+
#annotate("text", x = 5, y = 500, label = "Incidence", angle = 270)
# Late-early
plot7 <- plot_effective_n( le, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y_sec = F, ylim = c(0, n) )
# Late-middle
plot8 <- plot_effective_n( lc, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y = F, ticks_y_sec = F, ylim = c(0, n) ) #+
#annotate("text", x = 2.5, y = 20, label = "Time")
# Late-late
plot9 <- plot_effective_n( ll, mod = T, survival = F, bounds = F, xlim = c(0, maxtime), labels = F, no_legend = T, ticks_y = F, ylim = c(0, n) )
# Combine plots into list
plots <- list( plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9 )
# Column and row labels
col_labels <- c("Early censoring", "Constant censoring", "Late censoring")
row_labels <- c("Early events", "Constant events", "Late events")
# Create text grobs for column and row labels
col_text <- lapply(col_labels, textGrob, gp = gpar(fontsize = 14))
row_text <- lapply(row_labels, textGrob, gp = gpar(fontsize = 14), rot = 90)
# Create a sample plot to extract the legend
legend_plot <- ggplot(data.frame(x = 1, y = 1,
color = c("Effective", "Modified", "Uncensored", "At risk", "Incidence"),
linetype = c("Effective", "Modified", "Uncensored", "At risk", "Incidence")),
aes(x = x, y = y, color = color, linetype = linetype)) +
geom_line(linewidth = 1.3) +
scale_color_manual(values = c("Effective"= "#37293F", "Modified" = "#9f84af", "Uncensored" = "#c6aa2c", "At risk" = "#C2666B"), name = "Legend") +
scale_linetype_manual(values = c("Effective"= "solid", "Modified" = "solid", "Uncensored" = "dotdash", "At risk" = "dashed"), name = "Legend") +
theme(legend.position = "right") + theme_minimal()
# "Bounds",
# "Bounds" = "#c6b5cf",
# "Bounds" = "dashed",
# Extract the legend
legend <- cowplot::get_legend(legend_plot)
# Create top row with column labels
top_row <- arrangeGrob(
grobs = c(list(textGrob("")), col_text),
ncol = 4,
widths = c(0.1, 732/675, 1, 732/675)
)
# Create each row with plots and row label
rows <- lapply(1:3, function(i) {
arrangeGrob(
grobs = c(list(row_text[[i]]), plots[((i-1)*3+1):(i*3)]),
ncol = 4,
widths = c(0.1, 732/675, 1, 732/675)
)
})
# Combine the top row and all plot rows into the final grid
final_grid <- arrangeGrob(
grobs = c(list(top_row), rows),
ncol = 1,
heights = c(0.1, 1, 1, 827/800)
)
# Add legend to the grid
combined_grid <- arrangeGrob(
final_grid,
legend,
ncol = 2,
widths= c(8, 1)
)
grid.arrange(combined_grid)
#ggsave(file = "images/sim2.svg", plot=combined_grid, width = 12, height = 12, dpi = 700)
#rm( shape, scale, e_early, e_middle, e_late, c_early, c_middle, c_late,
#    early_early, early_middle, early_late, middle_early, middle_middle,
#    middle_late, late_early, late_middle, late_late, plot1, plot2, plot3, plot4,
#    plot5, plot6, plot7, plot8, plot9, plots, col_labels, row_labels, col_text,
#    row_text, legend_plot, legend, top_row, rows, final_grid, combined_grid)
grid.arrange(combined_grid)
#| eval: FALSE
#| include: FALSE
# This is just to generate seperate KMs
e_early <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[1]^(-shape[1]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = e_early)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
ggsave(file = "images/sim_km_e.svg", plot=p, width = 7, height = 5)
e_middle <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[1]^(-shape[2]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = e_middle)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
ggsave(file = "images/sim_km_m.svg", plot=p, width = 7, height = 5)
e_late <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[1]^(-shape[3]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = e_late)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
ggsave(file = "images/sim_km_l.svg", plot=p, width = 7, height = 5)
c_early <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[2]^(-shape[1]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = c_early)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
ggsave(file = "images/simc_km_e.svg", plot=p, width = 7, height = 5)
c_middle <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[2]^(-shape[2]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = c_middle)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
ggsave(file = "images/simc_km_m.svg", plot=p, width = 7, height = 5)
c_late <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[2]^(-shape[3]),
x=data.frame(id = 1:100000),
maxt=maxtime)
p <- survfit( Surv( eventtime, status)~1, data = c_late)|>
survfit_n() |>
plot_km_eff2( xlab = "Time (years)")
#ggsave(file = "images/simc_km_l.svg", plot=p, width = 7, height = 5)
#| eval: FALSE
#| include: FALSE
#| label: fig-sim-same-risk-diff-ess
#| fig-cap: Simulation of two same Kaplan-Meier curves, where the censoring distribution is chosen such that the number at risk will be the same for both simulations at some point, while the effective sample size is different.
#| fig-width: 14
#| fig-asp: 1
# Seed for consistency
set.seed(111923)
# scale[1] for events, scale[2] for censoring 1 and scale[3] for censoring 2
scale = c(2.5, 2.5, 2.5)
# shape[1] for events, [2] for censoring 1 and [3] for censoring 2
shape = c(1, 1/2, 2)
# number of iterations
iter = 300
# maxtime
maxtime = 5
# timegrid for plot
time = seq(0, maxtime, 0.002)
# So my setup is as follows. For the survival curve, I take the same for both, a Weibull( 1, 2.5 ), which is also an exponential distribution.
# For the censoring, if I also use scale 2.5 for both of those, then the cumulative hazard for both the events and censoring will be 1 in both
# simulations, which means that the number a risk must be the same as well (asymptotically, not every iteration of course). Then I can
# change the effective sample size by varying the shape of the censoring distribution. If I change it too harshly, then the survival
# function may be affected, so I choose 2 and 1/2 for it.
dat1 <- dat2 <- 0
# Multiple simulations - average 1 at a time
for ( i in 1:iter ){
# Generate the six datasets of 1000 patients
events <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[1]^(-shape[1]),
x=data.frame(id = 1:1000),
maxt=maxtime)
censoring_1 <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[2]^(-shape[2]),
x=data.frame(id = 1:1000),
maxt=maxtime)
censoring_2 <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[3]^(-shape[3]),
x=data.frame(id = 1:1000),
maxt=maxtime)
# Build the 2 dataframes for the figures
df_1 <- data.frame(
time = pmin(events$eventtime, censoring_1$eventtime),
status = ifelse(events$eventtime == maxtime & censoring_1$eventtime == maxtime, 0,
ifelse(events$eventtime <= censoring_1$eventtime, 1, 0))
)
df_2 <- data.frame(
time = pmin(events$eventtime, censoring_2$eventtime),
status = ifelse(events$eventtime == maxtime & censoring_2$eventtime == maxtime, 0,
ifelse(events$eventtime <= censoring_2$eventtime, 1, 0))
)
dat1 <- dat1 + 1/iter*(survfit( Surv( time, status ) ~ 1, data = df_1 ) |>
survfit_n() |>
sf_to_df( time = time ))
dat2 <- dat2 + 1/iter*(survfit( Surv( time, status ) ~ 1, data = df_2 ) |>
survfit_n() |>
sf_to_df( time = time ))
}
#| eval: FALSE
#| include: FALSE
#| label: fig-sim-same-risk-diff-ess
#| fig-cap: Simulation of two same Kaplan-Meier curves, where the censoring distribution is chosen such that the number at risk will be the same for both simulations at some point, while the effective sample size is different.
#| fig-width: 14
#| fig-asp: 1
# Seed for consistency
set.seed(111923)
# scale[1] for events, scale[2] for censoring 1 and scale[3] for censoring 2
scale = c(2.5, 2.5, 2.5)
# shape[1] for events, [2] for censoring 1 and [3] for censoring 2
shape = c(1, 1/2, 2)
# number of iterations
iter = 30
# maxtime
maxtime = 5
# timegrid for plot
time = seq(0, maxtime, 0.002)
# So my setup is as follows. For the survival curve, I take the same for both, a Weibull( 1, 2.5 ), which is also an exponential distribution.
# For the censoring, if I also use scale 2.5 for both of those, then the cumulative hazard for both the events and censoring will be 1 in both
# simulations, which means that the number a risk must be the same as well (asymptotically, not every iteration of course). Then I can
# change the effective sample size by varying the shape of the censoring distribution. If I change it too harshly, then the survival
# function may be affected, so I choose 2 and 1/2 for it.
dat1 <- dat2 <- 0
# Multiple simulations - average 1 at a time
for ( i in 1:iter ){
# Generate the six datasets of 1000 patients
events <- simsurv( dist="weibull",
gammas=shape[1],
lambdas=scale[1]^(-shape[1]),
x=data.frame(id = 1:1000),
maxt=maxtime)
censoring_1 <- simsurv( dist="weibull",
gammas=shape[2],
lambdas=scale[2]^(-shape[2]),
x=data.frame(id = 1:1000),
maxt=maxtime)
censoring_2 <- simsurv( dist="weibull",
gammas=shape[3],
lambdas=scale[3]^(-shape[3]),
x=data.frame(id = 1:1000),
maxt=maxtime)
# Build the 2 dataframes for the figures
df_1 <- data.frame(
time = pmin(events$eventtime, censoring_1$eventtime),
status = ifelse(events$eventtime == maxtime & censoring_1$eventtime == maxtime, 0,
ifelse(events$eventtime <= censoring_1$eventtime, 1, 0))
)
df_2 <- data.frame(
time = pmin(events$eventtime, censoring_2$eventtime),
status = ifelse(events$eventtime == maxtime & censoring_2$eventtime == maxtime, 0,
ifelse(events$eventtime <= censoring_2$eventtime, 1, 0))
)
dat1 <- dat1 + 1/iter*(survfit( Surv( time, status ) ~ 1, data = df_1 ) |>
survfit_n() |>
sf_to_df( time = time ))
dat2 <- dat2 + 1/iter*(survfit( Surv( time, status ) ~ 1, data = df_2 ) |>
survfit_n() |>
sf_to_df( time = time ))
}
n <- 1000
color_values <- c("Early Censoring"= "#2E7691", "Late Censoring" = "#C2666B")
linetype_values <- c("Effective"= "solid", "At Risk" = "dashed")
# calculate the time where dat1$n.risk and dat2$n.risk cross over, that is, the bigger becomes smaller
plot <- ggplot() +
geom_step(aes(x = dat1$time, y = dat1$n.eff, color = "Early Censoring", linetype = "Effective"), linewidth = 1.3) +
geom_step(aes(x = dat1$time, y = dat1$n.risk, color = "Early Censoring", linetype = "At Risk"), linewidth = 1.3) +
geom_step(aes(x = dat2$time, y = dat2$n.eff, color = "Late Censoring", linetype = "Effective"), linewidth = 1.3) +
geom_step(aes(x = dat2$time, y = dat2$n.risk, color = "Late Censoring", linetype = "At Risk"), linewidth = 1.3) +
labs(x = "Time", y = "Number") +
scale_x_continuous(breaks = seq(0, maxtime, length.out = 5)) +
theme_minimal() +
theme(legend.position.inside = c(0.1, 0.4), panel.grid.major.x = element_blank()) +
theme(text = element_text(size = 12), plot.title = element_text( size = 18, hjust = 0.3)) +
scale_color_manual(values = color_values, name = "Legend") +
scale_linetype_manual(values = linetype_values, name = "Legend") +
geom_vline(xintercept = 2.5, linetype = "dotted", lwd = 1.3)
plot
ggsave(file = "images/hein_sim_n.svg", plot=plot, width = 7, height = 5)
plot2 <- ggplot() +
geom_step(aes(x = dat1$time, y = dat1$surv, color = "Early Censoring"), linewidth = 1.3) +
geom_step(aes(x = dat2$time, y = dat2$surv, color = "Late Censoring"), linewidth = 1.3) +
labs(x = "Time", y = "Survival probability") +
scale_x_continuous(breaks = seq(0, maxtime, length.out = 5)) +
theme_minimal() +
theme(legend.position.inside = c(0.1, 0.4), panel.grid.major.x = element_blank()) +
theme(text = element_text(size = 12), plot.title = element_text( size = 18, hjust = 0.3)) +
scale_color_manual(values = color_values, name = "Legend") +
scale_linetype_manual(values = linetype_values, name = "Legend") +
geom_vline(xintercept = 2.5, linetype = "dotted", lwd = 1.3)
plot2
#ggsave(file = "images/hein_sim_surv.svg", plot=plot2, width = 7, height = 5)
plot2
#| output: TRUE
#| warning: FALSE
#| label: fig-tx
#| fig-width: 10
#| fig-asp: 0.7
#| fig-cap: |
#|   Kaplan-Meier curve of the colon data stratified by treatment arm. Effective sample size provides a more optimistic value of the amount of information that the estimator is based on, when compared to the number at risk. While there seems to be no real difference in censoring patterns, $N_{\text{eff}}$ of the three curves at $t=8$ are quite different due to the different times at which the last event occured in the three samples. Modified effective sample size is very similar for the three curves at $t=8$.
survfit( Surv( time, status) ~ rx, data = colon_os ) |>
survfit_n( ) |>
plot_km_eff( both = T, mark = T, title = "Kaplan-Meier with effective sample size", xlab = "Time (years)", legend.pos = c(0.15, 0.5) )
